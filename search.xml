<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Lane lines detection]]></title>
      <url>http://yoursite.com/2017/03/08/Lane-lines-detection/</url>
      <content type="html"><![CDATA[<p><img src="http://omiuf085h.bkt.clouddn.com/image/Lane-lines-detection/finalimage.jpg" alt=""></p>
<p><strong>Finding Lane Lines on the Road</strong></p>
<p>This article introduces how I built pipeline to detect the lane lines for a self-driving car project.</p>
<p>The goals / steps of this project are the following:</p>
<ul>
<li>Make a pipeline that finds lane lines on the road</li>
<li>Apply the pipeline to find lane lines in videos</li>
</ul>
<a id="more"></a>
<hr>
<h2 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h2><p>My pipeline consisted of the following steps:</p>
<ol>
<li>Converted the images to grayscale;</li>
<li>Applied Gaussian smoothing</li>
<li>Found the canny edges</li>
<li>Created a masked edges in the region of interest of the canny edges</li>
<li>Ran Hough lines on the masked edges</li>
<li>Separated the lines into left and right lines</li>
<li>Averaged and extrapolated the seprated lines</li>
<li>Merged left and right lines</li>
<li>Drew the merged lines along with the original images</li>
</ol>
<h3 id="Steps-1-to-5"><a href="#Steps-1-to-5" class="headerlink" title="Steps 1 to 5"></a>Steps 1 to 5</h3><p>Steps 1 to 5 can be completed by the following helpers as provided:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">grayscale</span><span class="params">(img)</span>:</span></div><div class="line">	<span class="comment"># Converted the images to grayscale</span></div><div class="line">   <span class="keyword">return</span> cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gaussian_blur</span><span class="params">(img, kernel_size)</span>:</span></div><div class="line">	<span class="comment"># Applied Gaussian smoothing</span></div><div class="line">   <span class="keyword">return</span> cv2.GaussianBlur(img, (kernel_size, kernel_size), <span class="number">0</span>)</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">canny</span><span class="params">(img, low_threshold, high_threshold)</span>:</span></div><div class="line">	<span class="comment"># Found the canny edges</span></div><div class="line">	<span class="keyword">return</span> cv2.Canny(img, low_threshold, high_threshold)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">region_of_interest</span><span class="params">(img, vertices)</span>:</span></div><div class="line">	<span class="comment">#defining a blank mask to start with</span></div><div class="line">	mask = np.zeros_like(img)   </div><div class="line">    </div><div class="line">    <span class="keyword">if</span> len(img.shape) &gt; <span class="number">2</span>:</div><div class="line">        channel_count = img.shape[<span class="number">2</span>]  <span class="comment"># i.e. 3 or 4 depending on your image</span></div><div class="line">        ignore_mask_color = (<span class="number">255</span>,) * channel_count</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        ignore_mask_color = <span class="number">255</span></div><div class="line">        </div><div class="line">    <span class="comment">#filling pixels inside the polygon defined by "vertices" with the fill color    </span></div><div class="line">    cv2.fillPoly(mask, vertices, ignore_mask_color)</div><div class="line">    </div><div class="line">    <span class="comment">#returning the image only where mask pixels are nonzero</span></div><div class="line">    masked_image = cv2.bitwise_and(img, mask)</div><div class="line">    <span class="keyword">return</span> masked_image</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_lines</span><span class="params">(img, lines, color=[<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>], thickness=<span class="number">10</span>)</span>:</span></div><div class="line">	<span class="comment"># draw lines on image</span></div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</div><div class="line">        <span class="keyword">for</span> x1,y1,x2,y2 <span class="keyword">in</span> line:</div><div class="line">            cv2.line(img, (x1, y1), (x2, y2), color, thickness)</div><div class="line">            </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hough_lines</span><span class="params">(img, rho, theta, threshold, min_line_len, max_line_gap)</span>:</span></div><div class="line">	<span class="comment"># Ran Hough lines</span></div><div class="line">    lines = cv2.HoughLinesP(img, rho, theta, threshold, np.array([]), minLineLength=min_line_len, maxLineGap=max_line_gap)</div><div class="line">    line_img = np.zeros((img.shape[<span class="number">0</span>], img.shape[<span class="number">1</span>], <span class="number">3</span>), dtype=np.uint8)</div><div class="line">    draw_lines(line_img, lines)</div><div class="line">    <span class="keyword">return</span> line_img</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">weighted_img</span><span class="params">(img, initial_img, α=<span class="number">0.8</span>, β=<span class="number">1.</span>, λ=<span class="number">0.</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> cv2.addWeighted(initial_img, α, img, β, λ)</div></pre></td></tr></table></figure>
<h3 id="Steps-6-to-8"><a href="#Steps-6-to-8" class="headerlink" title="Steps 6 to 8"></a>Steps 6 to 8</h3><p>In order to draw a single line on the left and right lanes (for steps 6 to 8), I added several functions before applying draw_lines() function:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">separate_lines</span><span class="params">(lines)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Leave for your own thinking </div><div class="line">    """ </div><div class="line">    <span class="keyword">return</span> right, left</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reject_outliers</span><span class="params">(lines,  m1=<span class="number">0.4</span>, m2=<span class="number">0.5</span>)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Leave for your own thinking </div><div class="line">    """ </div><div class="line">    <span class="keyword">return</span> new_lines</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_lines</span><span class="params">(lines)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Leave for your own thinking </div><div class="line">    """ </div><div class="line">    <span class="keyword">return</span> extraAndCombine(result_lines)</div><div class="line">        </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">extraAndCombine</span><span class="params">(lines)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Leave for your own thinking </div><div class="line">    """ </div><div class="line">    <span class="keyword">return</span> long_lines</div></pre></td></tr></table></figure>
<h2 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h2><p>Now, let’s take a look at how the pipeline works:</p>
<ul>
<li><p>Show the original image:<br><img src="http://omiuf085h.bkt.clouddn.com/image/Lane-lines-detection/original.jpg" alt="alt text" title="original"></p>
</li>
<li><p>Grayscale image:<br><img src="http://omiuf085h.bkt.clouddn.com/image/Lane-lines-detection/grayscale1.jpg" alt="alt text" title="gray scale"></p>
</li>
<li><p>Gaussian blurred image:<br><img src="http://omiuf085h.bkt.clouddn.com/image/Lane-lines-detection/gaussianblur.jpg" alt="alt text" title="gaussian blur"></p>
</li>
<li><p>Canny edges image:<br><img src="http://omiuf085h.bkt.clouddn.com/image/Lane-lines-detection/cannyedge.jpg" alt="alt text" title="cannyedge"></p>
</li>
<li><p>Masked edges image:<br><img src="http://omiuf085h.bkt.clouddn.com/image/Lane-lines-detection/maskededge.jpg" alt="alt text" title="masked edge"></p>
</li>
<li><p>Hough lines image:<br><img src="http://omiuf085h.bkt.clouddn.com/image/Lane-lines-detection/segmented.jpg" alt="alt text" title="segmented hough"></p>
</li>
<li><p>Final image after <strong>separate</strong>,<strong>average</strong>, <strong>extrapolate</strong>, and <strong>merge</strong> function:<br><img src="http://omiuf085h.bkt.clouddn.com/image/Lane-lines-detection/finalimage.jpg" alt="alt text" title="final image"></p>
</li>
</ul>
<h2 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h2><ul>
<li>Video with lane lines detetion:</li>
</ul>
<iframe width="480" height="270" src="https://www.youtube.com/embed/cJR8mmjCMuE" frameborder="0" allowfullscreen></iframe>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ch1.2 Python Environment]]></title>
      <url>http://yoursite.com/2017/02/13/Ch1-2-Python-Environment/</url>
      <content type="html"><![CDATA[<p><img src="https://upload.wikimedia.org/wikipedia/en/c/cd/Anaconda_Logo.png" alt="Anaconda logo"></p>
<p>There are three main different ways to programming in Python:</p>
<ol>
<li><a href="">Terminal</a></li>
<li><a href="">IPython Notebook</a></li>
<li><a href="">PyCharm</a></li>
</ol>
<p>For data science (including ML) problems, I will sugguest to use the first two IDE (Integrated Development Environment). </p>
<p>Because there are many different Python libraries, and different Python versions, I will suggest to install Anaconda or Minconda to manage the python versions and libraries. </p>
<p>In this guide, I will guide you to install miniconda first, and then create python 2.7 and python 3.5 environment, and install the most popular libraries, such as, numpy, pandas, , sklearn, matplotlib, tensorflow, and keras.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ch1.1 Intro of Machine Learning]]></title>
      <url>http://yoursite.com/2017/02/09/Ch1-1-Intro-of-Machine-Learning/</url>
      <content type="html"><![CDATA[<p><img src="http://marketbusinessnews.com/wp-content/uploads/2016/01/Google-Artificial-intelligence-AlphGo-wins-at-game-of-Go.jpg" alt="Nature Cover of Alphago &copyright;Nature"></p>
<p>Based on my first <a href="https://cafish.github.io/2017/01/26/My-first-blog/" target="_blank" rel="external">guide</a>, <a href="https://en.wikipedia.org/wiki/Machine_learning" target="_blank" rel="external">machine learning</a> (ML) is a substance of the hacking skills and math &amp; stats. Actually, it is one of the most important branch of the research and application for the <a href="https://en.wikipedia.org/wiki/Artificial_intelligence" target="_blank" rel="external">Artificial Intelligence</a> (AI).</p>
<p>In 2016, <a href="https://en.wikipedia.org/wiki/AlphaGo" target="_blank" rel="external">Alphago</a> of Google, as a intelligent machine, beated the champion Go player for the first time. (Note: Alphago used current most popular type of machine learning alogrithm, <a href="https://en.wikipedia.org/wiki/Deep_learning" target="_blank" rel="external">deep learning</a>.)  Since then, most of the people have agreed that we entered the era of AI.</p>
<a id="more"></a>
<h2 id="ML-Definition"><a href="#ML-Definition" class="headerlink" title="ML Definition"></a>ML Definition</h2><p><a href="http://www.cs.cmu.edu/~tom/" target="_blank" rel="external">Prof. Tom Mitchell</a> of Carnegie Mellon University defined ML as below:</p>
<pre><code>A program can be said to learn from experience E 
with respect to some class of tasks T
and performace measure P,
if its performance as tasks in T,
as measured by P,
improves with experience E.
</code></pre><p>To summarize the definition, a ML algorithm must have the ability to use the existing experience (<strong>E</strong>), to imporve the performance (<strong>P</strong>) to complete one specific task (<strong>T</strong>).</p>
<h2 id="ML-Example"><a href="#ML-Example" class="headerlink" title="ML Example"></a>ML Example</h2><p>Here we will use the boston housing price prediction model as an example to explain the ML. You do not need to understand the codes at this moment, as we will talk about it more later.</p>
<h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><pre><code>Prediting boston housing price
</code></pre><p>The tasks of machine learning usually include many different types. We will focus on two classical tasks, <a href="https://en.wikipedia.org/wiki/Supervised_learning" target="_blank" rel="external">Supervised Learing</a> and <a href="https://en.wikipedia.org/wiki/Unsupervised_learning" target="_blank" rel="external">Unsupervised Learning</a>. Supervised learning cares about the predition on the unknown phenomenon. It usually includes <a href="https://en.wikipedia.org/wiki/Statistical_classification" target="_blank" rel="external">Classification</a> and <a href="https://en.wikipedia.org/wiki/Regression_analysis" target="_blank" rel="external">Regresssion</a> problems. Unsupervised learning cares about the nature of the features of the things. It usually deals with <a href="https://en.wikipedia.org/wiki/Dimensionality_reduction" target="_blank" rel="external">Dimensionality Reduction</a> and <a href="https://en.wikipedia.org/wiki/Cluster_analysis" target="_blank" rel="external">Clustering</a> problems.</p>
<p>Therefore, the boston housing price prediction belongs to supervised machine learning task. To simplify here, we assume $X^{(i)}$ are the features of the house number i, such as size, location, number of rooms, etc; and $y^{(i)}$ is the housing price or target. For the predition task, if we build a model, we will then predict the housing price based on the input of the features.</p>
<h3 id="Experience"><a href="#Experience" class="headerlink" title="Experience"></a>Experience</h3><pre><code>Existing experience or data
</code></pre><p>For the boston housing price predition problem, we have 506 existing sample data. For each sample data, there are 13 features ($X^{(i)}$) and 1 target ($y^{(i)}$). Based on the existing data, we could build a target function $H_{\theta}(X^{(i)})$, which can predict the housing price based on the input of new features ($X^{(i)}$), such as a new house. Therefore, our task could be simplified as the following mathematic problem.</p>
<p>Define a cost function $J(\theta)$:</p>
<p>$$ J(\theta)= \sum_{i=1}^{m} \left( H(X^{(i)})-y^{(i)}\right)^2 $$ </p>
<p>and then minimize the cost function $J(\theta)$:</p>
<p>$$minimize J(\theta) $$ </p>
<p>For the cost function $J(\theta)$, the parameters $\theta$ are what we would like to get through the process of minimizing $J(\theta)$, which is the training process of the machine learning.</p>
<h3 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h3><pre><code>How good of the ML model to complete the task
</code></pre><p>To evaluate how good of our ML is, we need to set up some performance evaluation index. For example, for the boston housing predition problem, we can use <a href="https://en.wikipedia.org/wiki/Coefficient_of_determination" target="_blank" rel="external">R-squared</a> ($R^2$) to check how good of the model to predict the housing price of the testing housing examples. </p>
<p>The range of $R^2$ is from 0 to 1, and the higher the better.</p>
<p>Except for $R^2$, there are many other different indexes we will use to evaluate different models which will be introduced later. </p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>To sum up here, for a ML problem, our task is to use the existing data (or experience) to create a ML model, which will have good performance to make predictions based on new data.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[A Guide to Machine Learning and Kaggle]]></title>
      <url>http://yoursite.com/2017/01/26/My-first-blog/</url>
      <content type="html"><![CDATA[<p>Welcome to my blog! The main content of this blog is about data science. Based on <a href="http://drewconway.com/zia/2013/3/26/the-data-science-venn-diagram" target="_blank" rel="external">Drew Conway</a> Data Science Venn Diagram, a data scientist should have combined skills on hacking, math and stats, and substantive expertise.</p>
<p><img src="https://static1.squarespace.com/static/5150aec6e4b0e340ec52710a/t/51525c33e4b0b3e0d10f77ab/1364352052403/Data_Science_VD.png?format=1500w" alt=""></p>
<p>Among those skills, Machine Learning is one of the most important one. Therefore, if you want to be a data scientist, you have to know machine learning. If you are a beginner of the machine learning, this blog will be helpful for you. From today, I will post a series of guide to machine learning. And as some of you might have already known <a href="http://www.kaggle.com" target="_blank" rel="external">Kaggle</a>, which is the most popular machine learning competition website for the data scientist, I will also post the guide to Kaggle competition. </p>
<p>Here is a brief index of the Guide to Machine Learning and Kaggle.</p>
<a id="more"></a>
<h2 id="Chapter-1-Introduction"><a href="#Chapter-1-Introduction" class="headerlink" title="Chapter 1: Introduction"></a>Chapter 1: Introduction</h2><h3 id="1-1-Intro-of-Machine-Learning"><a href="#1-1-Intro-of-Machine-Learning" class="headerlink" title="1.1 Intro of Machine Learning"></a>1.1 Intro of Machine Learning</h3><h3 id="1-2-Python-Environment"><a href="#1-2-Python-Environment" class="headerlink" title="1.2 Python Environment"></a>1.2 Python Environment</h3><h3 id="1-3-Python-Programming-Basics"><a href="#1-3-Python-Programming-Basics" class="headerlink" title="1.3 Python Programming Basics"></a>1.3 Python Programming Basics</h3><h2 id="Chapter-2-Numpy"><a href="#Chapter-2-Numpy" class="headerlink" title="Chapter 2: Numpy"></a>Chapter 2: Numpy</h2><h2 id="Chapter-3-Pandas"><a href="#Chapter-3-Pandas" class="headerlink" title="Chapter 3: Pandas"></a>Chapter 3: Pandas</h2><h2 id="Chapter-4-Sklearn-and-Machine-Learning"><a href="#Chapter-4-Sklearn-and-Machine-Learning" class="headerlink" title="Chapter 4: Sklearn and Machine Learning"></a>Chapter 4: Sklearn and Machine Learning</h2><h3 id="4-1-Supervised-Learning"><a href="#4-1-Supervised-Learning" class="headerlink" title="4.1 Supervised Learning"></a>4.1 Supervised Learning</h3><p>4.1.1 Classification</p>
<p>4.1.2 Regression</p>
<h3 id="4-2-Unsupervised-Learning"><a href="#4-2-Unsupervised-Learning" class="headerlink" title="4.2 Unsupervised Learning"></a>4.2 Unsupervised Learning</h3><p>4.2.1 Clustering</p>
<p>4.2.2 Dimensionlity Reduction</p>
<h2 id="Chapter-5-TensorFlow-and-Keras"><a href="#Chapter-5-TensorFlow-and-Keras" class="headerlink" title="Chapter 5: TensorFlow and Keras"></a>Chapter 5: TensorFlow and Keras</h2><h2 id="Chapter-6-Kaggle-Competition"><a href="#Chapter-6-Kaggle-Competition" class="headerlink" title="Chapter 6: Kaggle Competition"></a>Chapter 6: Kaggle Competition</h2><h3 id="6-1-Intro-of-Kaggle"><a href="#6-1-Intro-of-Kaggle" class="headerlink" title="6.1 Intro of Kaggle"></a>6.1 Intro of Kaggle</h3><h3 id="6-2-Titanic"><a href="#6-2-Titanic" class="headerlink" title="6.2 Titanic"></a>6.2 Titanic</h3><h3 id="6-3-IMDB"><a href="#6-3-IMDB" class="headerlink" title="6.3 IMDB"></a>6.3 IMDB</h3><h3 id="6-4-MNIST"><a href="#6-4-MNIST" class="headerlink" title="6.4 MNIST"></a>6.4 MNIST</h3><h3 id="6-5-NCFM-Fisheries"><a href="#6-5-NCFM-Fisheries" class="headerlink" title="6.5 NCFM Fisheries"></a>6.5 NCFM Fisheries</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2017/01/26/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
